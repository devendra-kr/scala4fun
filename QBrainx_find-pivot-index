/*Given an array of integers nums, calculate the pivot index of this array.

The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.

If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.

Return the leftmost pivot index. If no such index exists, return -1.
*
*
* https://leetcode.com/problems/find-pivot-index/
*/


def pivotIndex(nums: Array[Int]): Int = {
       for(i <- 0 until nums.size){
           val leftSum = sum(nums, 0, i)
           val rightSum = sum(nums, i+1, nums.size)
           println("leftSum " + leftSum)
           println("rightSum " + rightSum)
           if(leftSum == rightSum)
            return i;
       }
       return -1;
    }
    
    def sum(nums: Array[Int], iIndex: Int, jIndex: Int) = {
        var res = 0
        for(i <- iIndex until jIndex)
            res = res + nums(i)
        res
    }
    
    
    // O(n) solution
    def pivotIndex(nums: Array[Int]): Int = {
        var sum = 0;
        for(i <- 0 until nums.size){
           sum += nums(i)
        }
        var leftSum = 0
        var rightSum = sum
        for(i <- 0 until nums.size){
           rightSum -= nums(i)
           if(leftSum == rightSum)
                return i;
            leftSum += nums(i)
        }
        return -1;
    }
