
/* Collections */

val list = Range(0, 10).toList
val listOfList = List(Range(0,10).toList, Range(10, 20).toList)

case class EMP(name: String, mobile: Long, gender: Char, address: String)

val info = List(EMP("dev", 9505398922L, 'M', "Hyderabad"),
                EMP("Sita", 9505342424L, 'F', "Delhi"),
                EMP("Mahi", 9443298922L, 'M', "Varanasi"))

/* anonymous function */ 

val double = (i: Int) => i * 2
val isEven = (i: Int) => i % 2 == 0

val flat = (x: Int) => x

val isMale = (e: EMP) => e.gender == 'M'
val isFemale = (e: EMP) => e.gender == 'F'
val name = (e: EMP) => e.name
val nameWithMobile = (e: EMP) => (e.name, e.mobile)
val nameWithAddess = (e: EMP) => (e.name, e.address)


/* filter, map and flatMap implementation. */
// non tail recursion. 
def filter[A](f: A => Boolean, ls: List[A]): List[A] = ls match {
  case Nil => ls
  case x :: y => f(x) match {
    case true => List(x) ++ filter(f, y) // here List(x) will store in stack memory until all call get complete. 
    case false => filter(f,y)
  }
}

// tail recursion. 
def customFilter[A](f: A => Boolean, ls: List[A]): List[A] = {
  def filter(ls: List[A], res: List[A]): List[A] = ls match {  // here we use extra memory to stored the result.
    case Nil => res
    case x::xs => f(x) match {
      case true => filter(xs, res :+ x) 
      case false => filter(xs, res)
    }
  }
  filter(ls, Nil)
}

def map[A,B](f: (A) => B, ls: List[A]): List[B] = {
  def mapRec[A,B](res: List[B], f: A => B, ls: List[A]): List[B] = ls match {
    case Nil => res
    case x :: y => mapRec(res ++ List(f(x)), f, y)
  }
  mapRec(List[B](), f, ls)
}

def faltMap[A,B](f: (A) => B, ls: List[List[A]]): List[B] = {
  def flatMapRec[A,B](res: List[B], f: (A) => B, ls: List[List[A]]): List[B] = ls match {
    case Nil => res
    case x :: y => flatMapRec(res ++ this.map(f,x), f, y)
  }
  flatMapRec(List[B](), f, ls)
}

/* Operations */

println("List:" + list)
println("Employee list:" + info)
println("List of list:" + listOfList)
println("\n")

println("Even Number:" + filter(isEven, list))
println("Male Employee:" + filter(isMale, info))

println("\n")


println("Double the list of elements:" + map(double, list))
println("Employee name:" + map(name, info))

println("\n")

println("Flat the list" + faltMap(flat, listOfList))
println("Double the list of elements and flat it:" + faltMap(double, listOfList))
