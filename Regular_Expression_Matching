Given an input string text and a pattern pattern, implement regular expression matching with support for '*' where:

'*' Appears at most once
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).



Example 1:

Input: text = "hello", pattern = "he*o"
Output: true
Explanation: '*' means zero or more of the preceding element, ll. Therefore, by repeating 'll' once, it becomes "hello"
Example 3:

Input: text = "heroes", pattern = "he*o"
Output: false
Explanation: "es" not match in pattern.


Constraints:

1 <= text.length <= 20
1 <= pattern.length <= 30
s contains only lowercase English letters.
p contains only lowercase English letters, and '*'.

object Main extends App {
    
     def isDenied(pattern: String, word: String): Boolean = {
          val patternLen = pattern.length
          val wordLen = word.length

          pattern.contains('*') match {
              case false => return pattern == word
              case _ => {
                  val indexOfAsterisk = pattern.indexOf('*')
                  val leftSubstring = pattern.substring(0, indexOfAsterisk)
                  val rightSubstring = pattern.substring(indexOfAsterisk + 1, patternLen)
                  
                  if(indexOfAsterisk < wordLen &&
                    leftSubstring != word.substring(0, indexOfAsterisk)) 
                    return false

                  val rightSubLength = wordLen - rightSubstring.length
                  
                  if(indexOfAsterisk < wordLen &&
                    rightSubstring != word.substring(rightSubLength, wordLen))
                  return false
              }

          }
        return true
     }
}
